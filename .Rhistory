names <- paste(tab$gene_id,tab$chromosome,tab$genomic_position,sep="_")
tab <- tab[,c(8:30)]
ntab<-data.frame(names,tab)
write.table(ntab,"Downloads/50_filtered.csv",quote=F,row.names=F,sep=",")
#$python find_consistency/mean.py 50_filtered.csv 0.9
tab <- read.csv("Downloads/0.9_avg_bycellline_matrix.csv",header=T)
pdf("pt9_barplot_nread50_new_SGNEx_bedgraphs_noreadfilter.pdf", height=10, width=20)
par(mfrow=c(1,2))
test <- table(rowSums(tab >= 0.9,na.rm=F))
barplot(test[c(2,3,4,5,6,7,8)],main=">0.9 in replicates from the same cell line (NA eliminated)",xlab="number of cell lines",ylab="total number of positions")
test
test <- table(rowSums(tab >= 0.9,na.rm=T))
test
tab <- read.csv("Downloads/add_function_xpore/ENSG00000162517_31630541_GGACA.txt")
View(tab)
junction_file <- "simulation_batch2_SJ_tab/HG00100_8b608b7a-d4d5-11e4-a827-bd90bc314f72_normal_sample_01_1_SJ.out.tab"
################################################
################################################
## LOAD LIBRARY                               ##
################################################
################################################
library(proActiv)
getwd()
setwd("Downloads/argorna/proActiv/")
devtools::install()
################################################
################################################
## LOAD LIBRARY                               ##
################################################
################################################
library(proActiv)
junction_file <- "simulation_batch2_SJ_tab/HG00100_8b608b7a-d4d5-11e4-a827-bd90bc314f72_normal_sample_01_1_SJ.out.tab"
condition     <- "normal"
annotation    <- "alternative-promoter-analysis/alternative-promoter-proactiv/tests/input/premade_promoter_annotation/gencode.v38.primary_assembly.annotation.rds"
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt",header=T)
View(tab)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt")
View(tab)
ggseqlogo(as.vector(tab$V1),method="prob")
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
ggseqlogo(as.vector(tab$V1),method="prob")
library(ggseqlogo)
library(ggplot2)
m7G_tab <- read.table("Downloads/add_function_xpore/ground_truths/m7Gseq.txt")
m5C_tab <- read.table("Downloads/add_function_xpore/ground_truths/m5Cseq.txt")
Y_tab <- read.table("Downloads/add_function_xpore/ground_truths/Yseq.txt")
kmer_list <- list(m7G_5mers = as.vector(m7G_tab$V1),
m5C_5mers= as.vector(m5C_tab$V1),
Y_5mers= as.vector(Y_tab$V1))
pdf("Downloads/add_function_xpore/ground_truths/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")
dev.off()
pdf("Downloads/add_function_xpore/ground_truths/sequence_logo.pdf")
#ggseqlogo(kmer_list,method="prob")+xlab("position")
ggseqlogo(kmer_list)+xlab("position")
dev.off()
pdf("Downloads/add_function_xpore/ground_truths/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")
dev.off()
ggseqlogo(kmer_list,method="prob")+xlab("position")
library(ggseqlogo)
library(ggplot2)
m7G_tab <- read.table("Downloads/add_function_xpore/ground_truths/top20seq_nodup/m7G.txt")
m5C_tab <- read.table("Downloads/add_function_xpore/ground_truths/top20seq_nodup/m5C.txt")
Y_tab <- read.table("Downloads/add_function_xpore/ground_truths/top20seq_nodup/Y.txt")
getwd()
library(ggseqlogo)
library(ggplot2)
m7G_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G.txt")
m5C_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C.txt")
Y_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/Y.txt")
kmer_list <- list(m7G_5mers = as.vector(m7G_tab$V1),
m5C_5mers= as.vector(m5C_tab$V1),
Y_5mers= as.vector(Y_tab$V1))
pdf("Downloads/add_function_xpore/ground_truths/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")
dev.off()
ggseqlogo(kmer_list,method="prob")+xlab("position")
library(ggseqlogo)
library(ggplot2)
Same_tab <- read.table("Downloads/add_function_xpore/pushUpDown/ranksame_kmers.txt")
Up_tab <- read.table("Downloads/add_function_xpore/pushUpDown/rankup_kmers.txt")
Down_tab <- read.table("Downloads/add_function_xpore/pushUpDown/rankdown_kmers.txt")
kmer_list <- list(rank_same = as.vector(Same_tab$V1),
rank_up= as.vector(Up_tab$V1),
rank_down= as.vector(Down_tab$V1))
pdf("Downloads/add_function_xpore/pushUpDown/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")
dev.off()
ggseqlogo(kmer_list,method="prob")+xlab("position")
library(ggseqlogo)
library(ggplot2)
Same_tab <- read.table("Downloads/add_function_xpore/pushUpDown/ranksame_kmers.txt")
Up_tab <- read.table("Downloads/add_function_xpore/pushUpDown/rankup_kmers.txt")
Down_tab <- read.table("Downloads/add_function_xpore/pushUpDown/rankdown_kmers.txt")
kmer_list <- list(rank_same = as.vector(Same_tab$V1),
rank_up= as.vector(Up_tab$V1),
rank_down= as.vector(Down_tab$V1))
pdf("Downloads/add_function_xpore/pushUpDown/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")
dev.off()
rm(list=ls())
m7G_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G.txt")
m5C_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C.txt")
Y_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/Y.txt")
View(m5C_tab)
m7G_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G.txt",sep=",")
m5C_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C.txt",sep=",")
Y_tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/Y.txt",sep=",")
View(m5C_tab)
lapply(Y_tab$V1, rep(x,Y_tab$V2))
lapply(Y_tab$V1, rep(Y_tab$V1,Y_tab$V2))
lapply(Y_tab$V1, FUN=rep(Y_tab$V1,Y_tab$V2))
rep(Y_tab$V1,Y_tab$V2)
View(Y_tab)
sum(Y_tab$V2)
kmer_list <- list(m7G = rep(m7G_tab$V1,m7G_tab$V2),
m5C = rep(m5C_tab$V1,m5C_tab$V2),
Y   = rep(Y_tab$V1,Y_tab$V2))
ggseqlogo(kmer_list,method="prob")+xlab("position")
#pdf("Downloads/add_function_xpore/pushUpDown/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")+
theme(text = element_text(size=20))
kmer_list <- list(m7G = rep(m7G_tab$V1,m7G_tab$V2),
m5C = rep(m5C_tab$V1,m5C_tab$V2),
Î¨   = rep(Y_tab$V1,Y_tab$V2))
#pdf("Downloads/add_function_xpore/pushUpDown/sequence_logo.pdf")
ggseqlogo(kmer_list,method="prob")+xlab("position")+
theme(text = element_text(size=20))
## load data for P1
originalTab <- read.table("P1/BRCA_proteomics_data_103.txt",sep="\t",header=TRUE,row.names=1)
sampleTab <- read.table("P1/BRCA_sample_information.txt",sep="\t",header=TRUE)
pam50annotation <- read.table("P1/pam50_annotation.txt",sep="\t",header=TRUE)
## 1a
normalizedTab <- originalTab
# normalize the abundance values so that mean is zero in each protein.
for (i in 1:nrow(normalizedTab)){
medianAbudance <- median(as.numeric(originalTab[i,]))
normalizedTab[i,] <- originalTab[i,]-medianAbudance
}
tnormalizedTab <- t(normalizedTab)
pam50Subtypes <- sampleTab[,c("PAM50.mRNA","patient")]
rownames(pam50Subtypes) <- gsub("-", ".", pam50Subtypes$patient)
stnormalizedTab <- merge(tnormalizedTab, pam50Subtypes,by=0, all=TRUE)
rownames(stnormalizedTab) <- make.names(stnormalizedTab$PAM50.mRNA, unique = TRUE)
hstnormalizedTab <- stnormalizedTab[,!(names(stnormalizedTab) %in% c("Row.names","patient","PAM50.mRNA"))]
library(gplots)
heatmap.2(as.matrix(hstnormalizedTab), trace="n", col=bluered(20), breaks=seq(-2,2,by=0.2),
distfun=function(x) as.dist(1-cor(t(x), method="pearson")), hclustfun=function(x) hclust(x, method="complete"))
## Take a subset of the original data
tsubOriginalTab <- t(originalTab[rownames(originalTab) %in% pam50annotation$GeneName,])
stsubOriginalTab <- merge(tsubOriginalTab, pam50Subtypes,by=0, all=TRUE)
rownames(stsubOriginalTab) <- make.names(stsubOriginalTab$PAM50.mRNA, unique = TRUE)
hstsubOriginalTab <- stsubOriginalTab[,!(names(stsubOriginalTab) %in% c("Row.names","patient","PAM50.mRNA"))]
sub_hc.complete=hclust(dist(as.matrix(hstsubOriginalTab)), method="complete")
plot(sub_hc.complete,main="PAM50 only -- Complete Linkage", xlab="", sub="", cex=.9)
## Use all proteins
tOriginalTab <- t(originalTab)
stOriginalTab <- merge(tOriginalTab, pam50Subtypes,by=0, all=TRUE)
rownames(stOriginalTab) <- make.names(stOriginalTab$PAM50.mRNA, unique = TRUE)
hstOriginalTab <- stOriginalTab[,!(names(stOriginalTab) %in% c("Row.names","patient","PAM50.mRNA"))]
all_hc.complete=hclust(dist(as.matrix(hstOriginalTab)), method="complete")
plot(all_hc.complete,main="All proteins -- Complete Linkage", xlab="", sub="", cex=.9)
problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue >= 0.1,]$protein
# identify a group of aberrant samples from the dendrogram of hierarchical clustering
clusters <- data.frame(cutree(all_hc.complete, h=110))
colnames(clusters) <- c("cluster")
clusters$sample <- rownames(clusters)
aberrant <- clusters[clusters$cluster == 2,]$sample
non_aberrant <- clusters[clusters$cluster == 1,]$sample
thstOriginalTab <- t(hstOriginalTab)
aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% aberrant])
non_aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% non_aberrant])
# perform differential protein expression analysis
nprotein = nrow(thstOriginalTab)
nAberrant = ncol(aberrantTab)
nNonAberrant = ncol(non_aberrantTab)
pval = rep(NA, nprotein)
tstat = rep(NA, nprotein)
log2fc = rep(NA, nprotein)
for(i in 1:nprotein) {
#if(i %% 1000 == 0) print(i)
tmp.x = as.numeric(aberrantTab[i,1:nAberrant])
tmp.y = as.numeric(non_aberrantTab[i,1:nNonAberrant])
# tmp.x = log2(tmp.x + 1) ## the gene expression values are negative already so probably logged already
# tmp.y = log2(tmp.y + 1)
tmp.test = t.test(x=tmp.x,y=tmp.y)
pval[i] = tmp.test$p.value
tstat[i] = tmp.test$statistic
log2fc[i] = mean(tmp.y) - mean(tmp.x)
}
par(mfrow=c(1,2)) ##plot raw pvalue
plot(tstat, -log10(pval), cex=.2, xlim=c(-10,10), xlab="t-statistic", main="pCR -- raw p-value")
plot(log2fc, -log10(pval), cex=.2, xlim=c(-1,1), xlab="Fold Change (log2)", main="pCR -- raw p-value")
par(mfrow=c(1,1))
# Identify proteins associated with the quality issue at 10% FDR.
library(qvalue)
qval = qvalue(pval)$qvalue
tabFCadjPVQV <- data.frame(rownames(thstOriginalTab),log2fc,qval)
colnames(tabFCadjPVQV) <- c("protein","log2FC","qvalue")
problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue >= 0.1,]$protein
# re-perform hierarchical clustering(PCA analysis) to confirm that the data are free from the quality issue
filtered_hstOriginalTab <- hstOriginalTab[,!colnames(hstOriginalTab) %in% problematicProteins]
filtered_all_hc.complete=hclust(dist(as.matrix(filtered_hstOriginalTab)), method="complete")
plot(filtered_all_hc.complete,main="All proteins (FDR 10%) -- Complete Linkage", xlab="", sub="", cex=.9)
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G.txt",sep=",")
ggseqlogo(as.array(tab$V1),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(ggseqlogo)
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(ggplot2)
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G_293T.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m7G_HepG2.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
View(tab)
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C_293T.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
View(tab)
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C_HepG2.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C_HepG2.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C_293T.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(ggseqlogo)
library(ggplot2)
tab <- read.table("Downloads/add_function_xpore/ground_truths/5mer_seq/top20seq_nodup/m5C_293T.txt",sep=",")
ggseqlogo(rep(tab$V1,tab$V2),method="prob")+xlab("position")+
theme(text = element_text(size=20))
## load data for P1
originalTab <- read.table("P1/BRCA_proteomics_data_103.txt",sep="\t",header=TRUE,row.names=1)
sampleTab <- read.table("P1/BRCA_sample_information.txt",sep="\t",header=TRUE)
pam50annotation <- read.table("P1/pam50_annotation.txt",sep="\t",header=TRUE)
## 1a
normalizedTab <- originalTab
# normalize the abundance values so that mean is zero in each protein.
for (i in 1:nrow(normalizedTab)){
medianAbudance <- median(as.numeric(originalTab[i,]))
normalizedTab[i,] <- originalTab[i,]-medianAbudance
}
tnormalizedTab <- t(normalizedTab)
pam50Subtypes <- sampleTab[,c("PAM50.mRNA","patient")]
rownames(pam50Subtypes) <- gsub("-", ".", pam50Subtypes$patient)
stnormalizedTab <- merge(tnormalizedTab, pam50Subtypes,by=0, all=TRUE)
rownames(stnormalizedTab) <- make.names(stnormalizedTab$PAM50.mRNA, unique = TRUE)
hstnormalizedTab <- stnormalizedTab[,!(names(stnormalizedTab) %in% c("Row.names","patient","PAM50.mRNA"))]
library(gplots)
heatmap.2(as.matrix(hstnormalizedTab), trace="n", col=bluered(20), breaks=seq(-2,2,by=0.2),
distfun=function(x) as.dist(1-cor(t(x), method="pearson")), hclustfun=function(x) hclust(x, method="complete"))
## Take a subset of the original data
tsubOriginalTab <- t(originalTab[rownames(originalTab) %in% pam50annotation$GeneName,])
stsubOriginalTab <- merge(tsubOriginalTab, pam50Subtypes,by=0, all=TRUE)
rownames(stsubOriginalTab) <- make.names(stsubOriginalTab$PAM50.mRNA, unique = TRUE)
hstsubOriginalTab <- stsubOriginalTab[,!(names(stsubOriginalTab) %in% c("Row.names","patient","PAM50.mRNA"))]
#sub_hc.complete=hclust(dist(as.matrix(hstsubOriginalTab)), method="complete")
sub_hc.complete=hclust(as.dist(1-cor(t(hstsubOriginalTab), method="pearson")), method="complete")
plot(sub_hc.complete,main="PAM50 only -- Complete Linkage", xlab="", sub="", cex=.9)
## Use all proteins
tOriginalTab <- t(originalTab)
stOriginalTab <- merge(tOriginalTab, pam50Subtypes,by=0, all=TRUE)
rownames(stOriginalTab) <- make.names(stOriginalTab$PAM50.mRNA, unique = TRUE)
hstOriginalTab <- stOriginalTab[,!(names(stOriginalTab) %in% c("Row.names","patient","PAM50.mRNA"))]
#all_hc.complete=hclust(dist(as.matrix(hstOriginalTab)), method="complete")
all_hc.complete=hclust(as.dist(1-cor(t(hstOriginalTab), method="pearson")), method="complete")
plot(all_hc.complete,main="All proteins -- Complete Linkage", xlab="", sub="", cex=.9)
# identify a group of aberrant samples from the dendrogram of hierarchical clustering
clusters <- data.frame(cutree(all_hc.complete, h=0.8))
View(clusters)
table(clusters)
View(clusters)
aberrant <- clusters[clusters$cluster == 2,]$sample
aberrant <- clusters[clusters$cluster == 2,]
View(all_hc.complete)
View(clusters)
colnames(clusters) <- c("cluster")
View(clusters)
aberrant <- clusters[clusters$cluster == 2,]
aberrant <- rownames(clusters[clusters$cluster == 2,])
# identify a group of aberrant samples from the dendrogram of hierarchical clustering
clusters <- data.frame(cutree(all_hc.complete, h=0.8))
table(clusters)
colnames(clusters) <- c("cluster")
clusters$sample <- rownames(clusters)
aberrant <- clusters[clusters$cluster == 2,]$sample
aberrant
non_aberrant <- clusters[clusters$cluster != 2,]$sample
thstOriginalTab <- t(hstOriginalTab)
aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% aberrant])
non_aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% non_aberrant])
# perform differential protein expression analysis
nprotein = nrow(thstOriginalTab)
nAberrant = ncol(aberrantTab)
nNonAberrant = ncol(non_aberrantTab)
pval = rep(NA, nprotein)
tstat = rep(NA, nprotein)
log2fc = rep(NA, nprotein)
for(i in 1:nprotein) {
#if(i %% 1000 == 0) print(i)
tmp.x = as.numeric(aberrantTab[i,1:nAberrant])
tmp.y = as.numeric(non_aberrantTab[i,1:nNonAberrant])
# tmp.x = log2(tmp.x + 1) ## the gene expression values are negative already so probably logged already
# tmp.y = log2(tmp.y + 1)
tmp.test = t.test(x=tmp.x,y=tmp.y)
pval[i] = tmp.test$p.value
tstat[i] = tmp.test$statistic
log2fc[i] = mean(tmp.y) - mean(tmp.x)
}
par(mfrow=c(1,2)) ##plot raw pvalue
plot(tstat, -log10(pval), cex=.2, xlim=c(-10,10), xlab="t-statistic", main="pCR -- raw p-value")
plot(log2fc, -log10(pval), cex=.2, xlim=c(-1,1), xlab="Fold Change (log2)", main="pCR -- raw p-value")
par(mfrow=c(1,1))
# Identify proteins associated with the quality issue at 10% FDR.
library(qvalue)
qval = qvalue(pval)$qvalue
tabFCadjPVQV <- data.frame(rownames(thstOriginalTab),log2fc,qval)
colnames(tabFCadjPVQV) <- c("protein","log2FC","qvalue")
#problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue >= 0.1,]$protein <- this is wrong as we are interested in aberrant protein, see following
problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue <= 0.1,]$protein
# re-perform hierarchical clustering(PCA analysis) to confirm that the data are free from the quality issue
filtered_hstOriginalTab <- hstOriginalTab[,!colnames(hstOriginalTab) %in% problematicProteins]
#filtered_all_hc.complete=hclust(dist(as.matrix(filtered_hstOriginalTab)), method="complete")
filtered_all_hc.complete=hclust(as.dist(1-cor(t(filtered_hstOriginalTab), method="pearson")), method="complete")
plot(filtered_all_hc.complete,main="All proteins (FDR 10%) -- Complete Linkage", xlab="", sub="", cex=.9)
# identify a group of aberrant samples from the dendrogram of hierarchical clustering
clusters <- data.frame(cutree(all_hc.complete, h=0.7))
table(clusters) ## the largest cluster is 2, which matches the heatmap aberrant cluster
colnames(clusters) <- c("cluster")
clusters$sample <- rownames(clusters)
aberrant <- clusters[clusters$cluster == 2,]$sample
non_aberrant <- clusters[clusters$cluster != 2,]$sample
thstOriginalTab <- t(hstOriginalTab)
aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% aberrant])
non_aberrantTab <- data.frame(thstOriginalTab[,colnames(thstOriginalTab) %in% non_aberrant])
# perform differential protein expression analysis
nprotein = nrow(thstOriginalTab)
nAberrant = ncol(aberrantTab)
nNonAberrant = ncol(non_aberrantTab)
pval = rep(NA, nprotein)
tstat = rep(NA, nprotein)
log2fc = rep(NA, nprotein)
for(i in 1:nprotein) {
#if(i %% 1000 == 0) print(i)
tmp.x = as.numeric(aberrantTab[i,1:nAberrant])
tmp.y = as.numeric(non_aberrantTab[i,1:nNonAberrant])
# tmp.x = log2(tmp.x + 1) ## the gene expression values are negative already so probably logged already
# tmp.y = log2(tmp.y + 1)
tmp.test = t.test(x=tmp.x,y=tmp.y)
pval[i] = tmp.test$p.value
tstat[i] = tmp.test$statistic
log2fc[i] = mean(tmp.y) - mean(tmp.x)
}
par(mfrow=c(1,2)) ##plot raw pvalue
plot(tstat, -log10(pval), cex=.2, xlim=c(-10,10), xlab="t-statistic", main="pCR -- raw p-value")
plot(log2fc, -log10(pval), cex=.2, xlim=c(-1,1), xlab="Fold Change (log2)", main="pCR -- raw p-value")
par(mfrow=c(1,1))
# Identify proteins associated with the quality issue at 10% FDR.
library(qvalue)
qval = qvalue(pval)$qvalue
tabFCadjPVQV <- data.frame(rownames(thstOriginalTab),log2fc,qval)
colnames(tabFCadjPVQV) <- c("protein","log2FC","qvalue")
#problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue >= 0.1,]$protein <- this is wrong as we are interested in aberrant protein, see following
problematicProteins <- tabFCadjPVQV[tabFCadjPVQV$qvalue <= 0.1,]$protein
# re-perform hierarchical clustering(PCA analysis) to confirm that the data are free from the quality issue
filtered_hstOriginalTab <- hstOriginalTab[,!colnames(hstOriginalTab) %in% problematicProteins]
#filtered_all_hc.complete=hclust(dist(as.matrix(filtered_hstOriginalTab)), method="complete")
filtered_all_hc.complete=hclust(as.dist(1-cor(t(filtered_hstOriginalTab), method="pearson")), method="complete")
plot(filtered_all_hc.complete,main="Remaining proteins (FDR 10%) -- Complete Linkage", xlab="", sub="", cex=.9)
tab <- read.table("Downloads/add_function_xpore/m7Gm5CY_histograms/num_positions/m7Gpositions.csv",sep=",")
View(tab)
ggseqlogo(rep(tab$V1,tab$V4),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(ggseqlogo)
ggseqlogo(rep(tab$V1,tab$V4),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(ggplot2)
ggseqlogo(rep(tab$V1,tab$V4),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/m7Gm5CY_histograms/num_positions/m7GHEK293T_positions.csv",sep=",")
ggseqlogo(rep(tab$V1,tab$V4),method="prob")+xlab("position")+
theme(text = element_text(size=20))
tab <- read.table("Downloads/add_function_xpore/m7Gm5CY_histograms/num_positions/m7GHepG2_positions.csv",sep=",")
ggseqlogo(rep(tab$V1,tab$V4),method="prob")+xlab("position")+
theme(text = element_text(size=20))
library(GenomicFeatures)
library(rtracklayer)
genomicLocus <- import.bed (con="test.bed")
View(genomicLocus)
genomicLocus
genomicLocus[1]
gencodeTxDb <- makeTxDbFromGFF (file="Downloads/Homo_sapiens.GRCh38.91.gtf")
gencodeTx <- transcripts (gencodeTxDb)
View(gencodeTx)
names (gencodeTx) <- id2name (gencodeTxDb, "tx")
View(gencodeTx)
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/m7G_293T_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
View(mappedLocus)
df <- unlist(mappedLocus.list)
View(mappedLocus)
df <- unlist(mappedLocus)
mappedLocus
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
View(df)
write.table(df, file="m7G_293T_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
write.table(df, file="Downloads/add_function_xpore/ground_truths/m7G_293T_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
df[,c(1,2)]
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/m7G_293T_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
rm(genomicLocus)
rm(mappedLocus)
rm(df)
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/m7G_HepG2_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/m7G_HepG2_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/m7G_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/m7G_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
## convert m7G genomic postions to transcript positions
library(GenomicFeatures)
library(rtracklayer)
gencodeTxDb <- makeTxDbFromGFF (file="Downloads/Homo_sapiens.GRCh38.91.gtf")
gencodeTx <- transcripts (gencodeTxDb)
names (gencodeTx) <- id2name (gencodeTxDb, "tx")
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/gtsites_in_dRNA_metagene_prep/m7G_293T_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
View(df)
## convert m7G genomic postions to transcript positions
library(GenomicFeatures)
library(rtracklayer)
gencodeTxDb <- makeTxDbFromGFF (file="Downloads/Homo_sapiens.GRCh38.91.gtf")
gencodeTx <- transcripts (gencodeTxDb)
names (gencodeTx) <- id2name (gencodeTxDb, "tx")
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/gtsites_in_dRNA_metagene_prep/brown_m7G_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/brown_m7G_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/gtsites_in_dRNA_metagene_prep/brown_m7G_293T_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/brown_m7G_293T_tx_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/gtsites_in_dRNA_metagene_prep/brown_m7G_HepG2_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/brown_m7G_HepG2_chr_pos.bed", quote=F, sep=",", row.names=F, col.names=F)
## convert m7G genomic postions to transcript positions
library(GenomicFeatures)
library(rtracklayer)
gencodeTxDb <- makeTxDbFromGFF (file="Downloads/Homo_sapiens.GRCh38.91.gtf")
gencodeTx <- transcripts (gencodeTxDb)
names (gencodeTx) <- id2name (gencodeTxDb, "tx")
##modify below
genomicLocus <- import.bed (con="Downloads/add_function_xpore/ground_truths/gtsites_in_dRNA_metagene_prep/brown_m7G_HepG2_chr_pos.bed")
mappedLocus <- mapToTranscripts (x=genomicLocus, transcripts=gencodeTx)
df <- data.frame(seqnames(mappedLocus),ranges(mappedLocus))
write.table(df[,c(1,2)], file="Downloads/add_function_xpore/ground_truths/brown_m7G_HepG2_chr_pos.csv", quote=F, sep=",", row.names=F, col.names=F)
setwd("nanoseq/")
